<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Common</name>
    </assembly>
    <members>
        <member name="M:Common.BadWordsFilter.BadWordReadText(System.String)">
            <summary>
            读取指定文件地址的文本文件内容
            </summary>
            <param name="filePath">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Common.BadWordsFilter.BadWordWriteText(System.String,System.String)">
            <summary>
            将指定内容写入到指定文件路径(true成功,false不成功)
            </summary>
            <param name="filePath">文件路径</param>
            <param name="text">要写入的文本内容</param>
            <returns></returns>
        </member>
        <member name="M:Common.BadWordsFilter.#ctor(System.String)">
            <summary>
            存放XML的绝对位置
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Common.BadWordsFilter.HasBadWord(System.String)">
            <summary>
            判断指定的文本中是否存在不允许的字符
            </summary>
            <param name="text">要判断的文本</param>
            <returns></returns>
        </member>
        <member name="P:Common.BadWordsFilter.KeyWordText">
            <summary>
            返回脏字文本(只读)
            </summary>
        </member>
        <member name="T:Common.Cache.AspnetCache">
            <summary>
            Aspnet缓存
            </summary>
        </member>
        <member name="T:Common.Cache.CacheBase">
            <summary>
            缓存基类
            </summary>
        </member>
        <member name="T:Common.Cache.ICache">
            <summary>
            缓存
            </summary>
        </member>
        <member name="M:Common.Cache.ICache.Add``1(System.String,``0)">
            <summary>
            增加
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>结果</returns>
        </member>
        <member name="M:Common.Cache.ICache.Add``1(System.String,``0,System.TimeSpan)">
            <summary>
            增加
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="duration">持续时间</param>
            <returns>结果</returns>
        </member>
        <member name="M:Common.Cache.ICache.Clear">
            <summary>
            清除
            </summary>
        </member>
        <member name="M:Common.Cache.ICache.Get``1(System.String)">
            <summary>
            获取
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="M:Common.Cache.ICache.MultiGet(System.Collections.Generic.IList{System.String})">
            <summary>
            多线程获取
            </summary>
            <param name="keys">键集合</param>
            <returns>值集合</returns>
        </member>
        <member name="M:Common.Cache.ICache.Remove(System.String)">
            <summary>
            移除
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Common.Cache.ICache.Set``1(System.String,``0)">
            <summary>
            设置
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>结果</returns>
        </member>
        <member name="M:Common.Cache.ICache.Set``1(System.String,``0,System.TimeSpan)">
            <summary>
            设置
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="duration">持续时间</param>
            <returns>结果</returns>
        </member>
        <member name="M:Common.Cache.CacheBase.GetFullName(System.String)">
            <summary>
             获取全名
            </summary>
            <param name="key">键</param>
            <returns>全名</returns>
        </member>
        <member name="P:Common.Cache.CacheBase.MaxDuration">
            <summary>
            最长持续时间
            </summary>
        </member>
        <member name="P:Common.Cache.CacheBase.Prefix">
            <summary>
            前缀
            </summary>
        </member>
        <member name="M:Common.Cache.AspnetCache.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Common.Cache.AspnetCache.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="prefix">前缀</param>
        </member>
        <member name="M:Common.CookieHelper.WriteCookie(System.String,System.String)">
            <summary>
            写cookie值，不在客户端创建文件，存放在服务器内存中。
            </summary>
            <param name="strName">名称</param>
            <param name="strValue">值</param>
        </member>
        <member name="M:Common.CookieHelper.WriteCookie(System.String,System.String,System.String,System.Int32)">
            <summary>
            写cookie值，在客户端创建文件。存放cookie值（单一项值）。
            </summary>
            <param name="strName">名称</param>
            <param name="strValue">值</param>
            <param name="cookieDomain">域</param>
            <param name="expires">cookie 保存时长 单位分种</param>
        </member>
        <member name="M:Common.CookieHelper.WriteCookie(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            写cookie值（存放数组形式参数，用于第一次写cookie值，并指定有效时间）
            </summary>
            <param name="cookieName">cookies名字</param>
            <param name="strValuesName">cookie项的名称，cookie[strValuesName][]</param>
            <param name="strValue">cookie项的值，cookie[strValuesName][strValue]</param>
            <param name="cookieDomain">cookie域属性</param>
            <param name="expires">cookies 有效时间 单位分钟</param>
        </member>
        <member name="M:Common.CookieHelper.WriteCookie(System.String,System.String,System.String,System.String)">
            <summary>
            写cookie值（操作已经存在的cookie，存放数组形式参数）
            </summary>
            <param name="cookieName">cookies名字</param>
            <param name="strValuesName">cookie项的名称，cookie[strValuesName][]</param>
            <param name="strValue">cookie项的值，cookie[strValuesName][strValue]</param>
            <param name="cookieDomain">cookie域属性</param>
        </member>
        <member name="M:Common.CookieHelper.ClearUserCookie(System.String,System.String)">
            <summary>
            清除登录用户的cookie
            </summary>
        </member>
        <member name="M:Common.CookieHelper.GetCookie(System.String)">
            <summary>
            读cookie值
            </summary>
            <param name="strName">名称</param>
            <returns>cookie值</returns>
        </member>
        <member name="M:Common.CookieHelper.GetCookie(System.String,System.String)">
            <summary>
            获得cookie值
            </summary>
            <param name="strName">项</param>
            <returns>值</returns>
        </member>
        <member name="M:Common.CookieHelper.IsValidDomain(System.String)">
            <summary>
            是否为有效域
            </summary>
            <param name="host">域名</param>
            <returns></returns>
        </member>
        <member name="T:Common.FTP">
            <summary>
            FTP类
            </summary>
        </member>
        <member name="M:Common.FTP.GetList">
            <summary>
            获取文件及文件夹列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.FTP.MakeDir(System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="dirName"></param>
        </member>
        <member name="M:Common.FTP.Upload(System.String)">
            <summary>
            将文件上载到ftp服务器
            </summary>
            <param name="filename">文件名</param>
        </member>
        <member name="M:Common.FTP.AppendFile(System.String)">
            <summary>
            将文件追加到现有的文件夹内
            </summary>
            <param name="filename">文件名</param>
        </member>
        <member name="M:Common.FTP.Delete(System.String)">
            <summary>
            用于删除ftp服务器的文件
            </summary>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:Common.FTP.ReName(System.String,System.String)">
            <summary>
            重命名目录
            </summary>
            <param name="currentFilename">原来名称</param>
            <param name="newFilename">新名称</param>
        </member>
        <member name="M:Common.FTP.DirectoryExist(System.String)">
            <summary>
            判断当前目录下指定的子目录是否存在
            </summary>
            <param name="RemoteDirectoryName">指定的目录名</param>
        </member>
        <member name="M:Common.FTP.GetDirectoryList">
            <summary>
            获取当前目录下所有的文件夹列表(仅文件夹)
            </summary> 
            <returns></returns>
        </member>
        <member name="M:Common.FTP.GetFilesDetailList">
            <summary>
            获取当前目录下明细(包含文件和文件夹)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.FTP.RemoveDirectory(System.String)">
            <summary>
            删除文件夹
            </summary>
            <param name="folderName"></param>
        </member>
        <member name="M:Common.FTP.GetAllFolder">
            <summary>
            获得当前文件夹下的所有目录（仅文件夹）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.FTP.GetAllFiles">
            <summary>
            获得当前文件夹下的所有文件（仅文件）
            </summary>
            <returns></returns>
        </member>
        <member name="P:Common.FTP.FtpPath">
            <summary>
            ftp 路径
            </summary>
        </member>
        <member name="P:Common.FTP.FtpServerIP">
            <summary>
            ftp Ip地址
            </summary>
        </member>
        <member name="P:Common.FTP.FtpUserName">
            <summary>
            ftp 用户名
            </summary>
        </member>
        <member name="P:Common.FTP.FtpPassword">
            <summary>
            ftp 密码
            </summary>
        </member>
        <member name="F:Common.FileStruct.Flags">
            <summary>
            属性
            </summary>
        </member>
        <member name="F:Common.FileStruct.Owner">
            <summary>
            所有者
            </summary>
        </member>
        <member name="F:Common.FileStruct.IsDirectory">
            <summary>
            是否为目录
            </summary>
        </member>
        <member name="F:Common.FileStruct.CreateTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="F:Common.FileStruct.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:Common.FileStruct.FileSize">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="F:Common.FileStruct.FileType">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:Common.DirectoryListParser.FileList">
            <summary>
            文件列表
            </summary>
        </member>
        <member name="P:Common.DirectoryListParser.DirectoryList">
            <summary>
            目录列表
            </summary>
        </member>
        <member name="M:Common.GenericSort.SortClass.#ctor(System.String,System.Web.UI.WebControls.SortDirection)">
            <summary>
            初始化构造函数
            </summary>
            <param name="sortProperty">排序属性</param>
            <param name="sortDirection">排序方向</param>
        </member>
        <member name="P:Common.GenericSort.SortClass.SortProperty">
            <summary>
            排序的属性
            </summary>
        </member>
        <member name="P:Common.GenericSort.SortClass.SortDirection">
            <summary>
            排序方向
            </summary>
        </member>
        <member name="T:Common.GridViewExportUtil">
            <summary>
            导出EXCEL
            </summary>
        </member>
        <member name="M:Common.GridViewExportUtil.Export(System.String,System.Web.UI.WebControls.GridView)">
            <summary>
            将GRIDVIEW导出excel
            </summary>
            <param name="fileName">excel文件名</param>
            <param name="gv">GridView ＩＤ</param>
        </member>
        <member name="M:Common.GridViewExportUtil.PrepareControlForExport(System.Web.UI.Control)">
            <summary>
            Replace any of the contained controls with literals
            </summary>
            <param name="control"></param>
        </member>
        <member name="T:Common.JSONhelper">
            <summary>
            JSON 帮助类
            </summary>
        </member>
        <member name="M:Common.JSONhelper.ConvertToObject``1(System.String)">
            <summary>
            将JSON转换为指定类型的对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="json">json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Common.JSONhelper.ToJson(System.Object)">
            <summary>
            生成压缩的json 字符串
            </summary>
            <param name="obj">生成json的对象</param>
            <returns></returns>
        </member>
        <member name="M:Common.JSONhelper.ToJson(System.Object,System.Boolean)">
            <summary>
            生成JSON字符串
            </summary>
            <param name="obj">生成json的对象</param>
            <param name="formatjson">是否格式化</param>
            <returns></returns>
        </member>
        <member name="M:Common.JSONhelper.ConvertTojQgridJSON``1(System.Int32,System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            将数据源转换为JQGRID的JSON格式
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="pageindex">页索引</param>
            <param name="pagesize">页尺寸</param>
            <param name="list">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Common.JSONhelper.GetJsonforjQgrid(System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            获取指定表的数据，并转换为jqgrid 的JSON格式。适用于sql2000 以上版本
            </summary>
            <param name="pageindex">当前第几页</param>
            <param name="pagesize">每页记录条数</param>
            <param name="orderfield">排序字段 如：id asc,name desc</param>
            <param name="key">主键</param>
            <param name="where">筛选条件</param>
            <param name="tbname">表或视图名</param>
            <returns></returns>
        </member>
        <member name="M:Common.JSONhelper.GetJsonforjQgrid(System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            获取指定表的数据，并转换为jqgrid 的JSON格式。适用于sql2000 以上版本
            </summary>
            <param name="fields">要选取的列，以逗号隔开</param>
            <param name="pageindex">当前第几页</param>
            <param name="pagesize">每页记录条数</param>
            <param name="orderfield">排序</param>
            <param name="key">关键字</param>
            <param name="where">条件</param>
            <param name="tbname">表名或视图名</param>
            <returns></returns>
        </member>
        <member name="M:Common.JSONhelper.GetJsonForEasyuiDatagrid(System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            获取easyui datagrid 所需要的JSON数据
            </summary>
            <param name="pageindex">第几页</param>
            <param name="pagesize">每页记录数</param>
            <param name="keyfield">主键字段名</param>
            <param name="where">条件</param>
            <param name="sort">排序字段</param>
            <param name="tablename">表名</param>
            <returns></returns>
        </member>
        <member name="M:Common.JSONhelper.GetJsonForEasyuiDatagrid(System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            获取easyui datagrid 所需要的JSON数据
            </summary>
            <param name="fields">字段列表，以逗号隔开</param>
            <param name="pageindex">第几页</param>
            <param name="pagesize">每页记录数</param>
            <param name="keyfield">主键字段名</param>
            <param name="where">条件</param>
            <param name="sort">排序字段</param>
            <param name="tablename">表名</param>
            <returns></returns>
        </member>
        <member name="M:Common.JSONhelper.FormatJSONForEasyuiDataGrid(System.Int32,System.String)">
            <summary>
            格式化EASYUI DATAGRID JSON
            </summary>
            <param name="recordcount">总记录数</param>
            <param name="rows">每页记录的JSON格式</param>
            <returns></returns>
        </member>
        <member name="M:Common.MediaHelper.wmv(System.String,System.String,System.String)">
              <summary>    
              wmv格式文件播放    
              </summary>    
              <param   name="url"></param>    
              <returns></returns>    
        </member>
        <member name="M:Common.MediaHelper.wma(System.String,System.String,System.String)">
            <summary>
            播放wma格式文件
            </summary>
            <param name="url">文件地址</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <returns></returns>
        </member>
        <member name="M:Common.MediaHelper.avi(System.String,System.String,System.String)">
              <summary>    
              avi格式文件播放    
              </summary>    
              <param   name="url"></param>    
              <returns></returns>    
        </member>
        <member name="M:Common.MediaHelper.mpg(System.String,System.String,System.String)">
            <summary>
            播放mpg格式的文件
            </summary>
            <param name="url"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Common.MediaHelper.rm(System.String,System.String,System.String)">
            <summary>
            播放rm格式的文件
            </summary>
            <param name="url"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Common.MediaHelper.swf(System.String,System.String,System.String)">
            <summary>
            播放swf格式的文件
            </summary>
            <param name="url"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Common.MediaHelper.mp3(System.String,System.String,System.String)">
            <summary>
            播放mp3
            </summary>
            <param name="url"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Common.MessageBox.Show(System.Web.UI.Page,System.String)">
            <summary>
            显示消息提示对话框
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="msg">提示信息</param>
        </member>
        <member name="M:Common.MessageBox.ShowConfirm(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            控件点击 消息确认提示框
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="msg">提示信息</param>
        </member>
        <member name="M:Common.MessageBox.ShowAndRedirect(System.Web.UI.Page,System.String,System.String)">
            <summary>
            显示消息提示对话框，并进行页面跳转
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="msg">提示信息</param>
            <param name="url">跳转的目标URL</param>
        </member>
        <member name="M:Common.MessageBox.ShowOpenAndRedirect(System.Web.UI.Page,System.String,System.String)">
            <summary>
            显示消息提示对话框，并打开指定窗口(该方法必须引用ControlHelper.js文件)
            </summary>
            <param name="page"></param>
            <param name="msg"></param>
            <param name="url"></param>
        </member>
        <member name="M:Common.MessageBox.Redirect(System.Web.UI.Page,System.String)">
            <summary>
            页面跳转
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="url">跳转的目标URL</param>
        </member>
        <member name="M:Common.MessageBox.ResponseScript(System.Web.UI.Page,System.String)">
            <summary>
            输出自定义脚本信息
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="script">输出脚本</param>
        </member>
        <member name="M:Common.MessageBox.ResponseScript(System.Web.UI.Page,System.String,System.String)">
            <summary>
            弹出自定义信息，并跳转到目标URL
            </summary>
            <param name="page">当前页面</param>
            <param name="alertstring">提示信息</param>
            <param name="locationhref">跳转的目标URL地址</param>
        </member>
        <member name="M:Common.MessageBox.HiAlert(System.Web.UI.Page,System.String,System.String)">
            <summary>
            使用HIALERT jQuery 弹出插件
            </summary>
            <param name="page"></param>
            <param name="alertstring">内容</param>
            <param name="title">标题 </param>
        </member>
        <member name="M:Common.MessageBox.HiAlert(System.Web.UI.Page,System.String,System.String,System.String)">
            <summary>
            使用HIALERT jQuery 弹出插件
            </summary>
            <param name="page"></param>
            <param name="alertstring">内容</param>
            <param name="title">标题 </param>
            <param name="function">方法串 </param>
        </member>
        <member name="M:Common.MessageBox.HiAlert(System.Web.UI.Page,System.String)">
            <summary>
            使用HIALERT jQuery 弹出插件
            </summary>
            <param name="page"></param>
            <param name="alertstring">内容</param>
        </member>
        <member name="M:Common.MessageBox.HiBodyAlert(System.Web.UI.Page,System.String)">
            <summary>
            向body页面的onload事件中加入弹出信息
            </summary>
            <param name="page">当前页面</param>
            <param name="alertstring">要弹出的信息</param>
        </member>
        <member name="T:Common.OleDbHelper">
            <summary>
            The OleDbHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of OleDbClient.
            </summary>
        </member>
        <member name="M:Common.OleDbHelper.AttachParameters(System.Data.OleDb.OleDbCommand,System.Data.OleDb.OleDbParameter[])">
            <summary>
            This method is used to attach array's of OleDbParameters to an OleDbCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">an array of OleDbParameters tho be added to command</param>
        </member>
        <member name="M:Common.OleDbHelper.AssignParameterValues(System.Data.OleDb.OleDbParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of OleDbParameters.
            </summary>
            <param name="commandParameters">array of OleDbParameters to be assigned values</param>
            <param name="parameterValues">array of objects holding the values to be assigned</param>
        </member>
        <member name="M:Common.OleDbHelper.PrepareCommand(System.Data.OleDb.OleDbCommand,System.Data.OleDb.OleDbConnection,System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command.
            </summary>
            <param name="command">the OleDbCommand to be prepared</param>
            <param name="connection">a valid OleDbConnection, on which to execute this command</param>
            <param name="transaction">a valid OleDbTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OleDbParameters to be associated with the command or 'null' if no parameters are required</param>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OleDbParameters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbDbCommand (that returns no resultset and takes no parameters) against the provided OleDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns no resultset) against the specified OleDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns no resultset) against the specified OleDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns no resultset and takes no parameters) against the provided OleDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns no resultset) against the specified OleDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns no resultset) against the specified 
            OleDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns a resultset) against the database specified in 
            the conneciton string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns a resultset and takes no parameters) against the provided OleDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns a resultset) against the specified OleDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns a resultset) against the specified OleDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns a resultset and takes no parameters) against the provided OleDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns a resultset) against the specified OleDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns a resultset) against the specified 
            OleDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[],Common.OleDbHelper.OleDbConnectionOwnership)">
            <summary>
            Create and prepare an OleDbCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">a valid OleDbConnection, on which to execute this command</param>
            <param name="transaction">a valid OleDbTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OleDbParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">indicates whether the connection parameter was provided by the caller, or created by OleDbHelper</param>
            <returns>OleDbDataReader containing the results of the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OleDbParameters used to execute the command</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OleDbDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns a resultset and takes no parameters) against the provided OleDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns a resultset) against the specified OleDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns a resultset) against the specified OleDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OleDbDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an OleDbCommand (that returns a resultset and takes no parameters) against the provided OleDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>  
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute an OleDbCommand (that returns a resultset) against the specified OleDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              OleDbDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param> 
            <param name="commandParameters">an array of OleDbParameters used to execute the command</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an OleDbCommand (that returns a resultset) against the specified
            OleDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OleDbDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a 1x1 resultset) against the database specified in 
            the conneciton string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset and takes no parameters) against the provided OleDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset) against the specified OleDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a 1x1 resultset) against the specified OleDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">a valid OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset and takes no parameters) against the provided OleDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset) against the specified OleDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Common.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a 1x1 resultset) against the specified
            OleDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">a valid OleDbTransaction</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="T:Common.OleDbHelper.OleDbConnectionOwnership">
            <summary>
            this enum is used to indicate weather the connection was provided by the caller, or created by OleDbHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:Common.OleDbHelper.OleDbConnectionOwnership.Internal">
            <summary>Connection is owned and managed by OleDbHelper</summary>
        </member>
        <member name="F:Common.OleDbHelper.OleDbConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:Common.OleDbHelperParameterCache">
            <summary>
            OleDbHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:Common.OleDbHelperParameterCache.DiscoverSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            resolve at run-time the appropriate set of OleDbParameters for a stored procedure
            </summary>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="includeReturnValueParameter">weather or not to onclude ther return value parameter</param>
            <returns></returns>
        </member>
        <member name="M:Common.OleDbHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            add parameter array to the cache
            </summary>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="commandParameters">an array of OleDbParamters to be cached</param>
        </member>
        <member name="M:Common.OleDbHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <returns>an array of OleDbParameters</returns>
        </member>
        <member name="M:Common.OleDbHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of OleDbParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <returns>an array of OleDbParameters</returns>
        </member>
        <member name="M:Common.OleDbHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of OleDbParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">a valid connection string for an OleDbConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">a bool value indicating weather the return value parameter should be included in the results</param>
            <returns>an array of OleDbParameters</returns>
        </member>
        <member name="M:Common.PublicMethod.GetRecordCount(System.String)">
            <summary>
            获取某表中的总记录数
            </summary>
            <param name="tablename">表名</param>
            <returns></returns>
        </member>
        <member name="M:Common.PublicMethod.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取指定表中的数据
            </summary>
            <param name="tablename">表名</param>
            <param name="where">条件</param>
            <returns></returns>
        </member>
        <member name="M:Common.PublicMethod.GetADataRow(System.String,System.String,System.String,System.String@)">
            <summary>
            根据主键Id,获取一行数据
            </summary>
            <param name="tableName">表名</param>
            <param name="keyName">主键名称</param>
            <param name="value">值</param>
            <param name="msg">返回信息</param>
            <returns></returns>
        </member>
        <member name="M:Common.PublicMethod.GetInt(System.Object)">
            <summary>
            取得Int值,如果为Null 则返回０
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Common.PublicMethod.GetInt(System.Object,System.Int32)">
            <summary>
            取得Int值,如果不成功则返回指定exceptionvalue值
            </summary>
            <param name="obj">要计算的值</param>
            <param name="exceptionvalue">异常时的返回值</param>
            <returns></returns>
        </member>
        <member name="M:Common.PublicMethod.GetDecimal(System.Object,System.Int32)">
            <summary>
            取得Decima值,如果不成功则返回指定exceptionvalue值
            </summary>
            <param name="obj">要计算的值</param>
            <param name="exceptionvalue">异常时的返回值</param>
            <returns></returns>
        </member>
        <member name="M:Common.PublicMethod.Getbyte(System.Object)">
            <summary>
            取得byte值
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Common.PublicMethod.GetLong(System.Object)">
            <summary>
            获得Long值
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Common.PublicMethod.GetLong(System.Object,System.Int64)">
            <summary>
            取得Long值,如果不成功则返回指定exceptionvalue值
            </summary>
            <param name="obj">要计算的值</param>
            <param name="exceptionvalue">异常时的返回值</param>
            <returns></returns>
        </member>
        <member name="M:Common.PublicMethod.GetDecimal(System.Object)">
            <summary>
            取得Decimal值
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Common.PublicMethod.GetGuid(System.Object)">
            <summary>
            取得Guid值
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Common.PublicMethod.GetDateTime(System.Object)">
            <summary>
            取得DateTime值
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Common.PublicMethod.GetBool(System.Object)">
            <summary>
            取得bool值
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Common.PublicMethod.GetByte(System.Object)">
            <summary>
            取得byte[]
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Common.PublicMethod.GetString(System.Object)">
            <summary>
            取得string值
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Common.PublicMethod.AddSqlParameters(System.String,System.Object[])">
            <summary>
            增加sql参数并返回
            </summary>
            <param name="arguments">参数列表(格式:@name,@sex,@email......)</param>
            <param name="param">参数对应值</param>
            <returns></returns>
        </member>
        <member name="M:Common.PublicMethod.AddSqlParameters(System.Text.StringBuilder@,System.String,System.Object[])">
            <summary>
            增加赋值sql参数并返回
            </summary>
            <param name="sqls">sql赋值可变对象</param>
            <param name="arguments">参数列表(格式:@name,@sex,@email......)</param>
            <param name="param">参数对应值</param>
            <returns></returns>
        </member>
        <member name="M:Common.PublicMethod.AddSetIntSqlParameter(System.Collections.Generic.List{System.Data.SqlClient.SqlParameter},System.Text.StringBuilder,System.String,System.Int32)">
            <summary>
            赋值时给指定泛型及可变串追加指定字段及指定Int值
            </summary>
            <param name="para">sql参数泛型</param>
            <param name="sqls">sql可变字段</param>
            <param name="field">字段名称</param>
            <param name="fieldvalue">字段值</param>
        </member>
        <member name="M:Common.PublicMethod.AddSetStringSqlParameter(System.Collections.Generic.List{System.Data.SqlClient.SqlParameter},System.Text.StringBuilder,System.String,System.String)">
            <summary>
            赋值时给指定泛型及可变串追加指定字段及指定String值
            </summary>
            <param name="para">sql参数泛型</param>
            <param name="sqls">sql可变字段</param>
            <param name="field">字段名称</param>
            <param name="fieldvalue">字段值</param>
        </member>
        <member name="M:Common.PublicMethod.AddSetDateSqlParameter(System.Collections.Generic.List{System.Data.SqlClient.SqlParameter},System.Text.StringBuilder,System.String,System.DateTime)">
            <summary>
            赋值时给指定泛型及可变串追加指定字段及指定日期String值
            </summary>
            <param name="para">sql参数泛型</param>
            <param name="sqls">sql可变字段</param>
            <param name="field">字段名称</param>
            <param name="fieldvalue">字段值</param>
        </member>
        <member name="M:Common.PublicMethod.AddWhereIntSqlParameter(System.Collections.Generic.List{System.Data.SqlClient.SqlParameter},System.Text.StringBuilder,System.String,System.Int32)">
            <summary>
            指定条件时给指定泛型及可变串追加指定字段及指定Int值
            </summary>
            <param name="para">sql参数泛型</param>
            <param name="sqls">sql可变字段</param>
            <param name="field">字段名称</param>
            <param name="fieldvalue">字段值</param>
        </member>
        <member name="M:Common.PublicMethod.AddWhereStringSqlParameter(System.Collections.Generic.List{System.Data.SqlClient.SqlParameter},System.Text.StringBuilder,System.String,System.String)">
            <summary>
            指定条件时给指定泛型及可变串追加指定字段及指定String值
            </summary>
            <param name="para">sql参数泛型</param>
            <param name="sqls">sql可变字段</param>
            <param name="field">字段名称</param>
            <param name="fieldvalue">字段值</param>
        </member>
        <member name="M:Common.PublicMethod.GetMaxID(System.String,System.String)">
            <summary>
            获取指定表中指定字段的最大值
            </summary>
            <param name="tableName">表名称</param>
            <param name="field">字段</param>
            <returns>Return Type:Int</returns>
        </member>
        <member name="M:Common.PublicMethod.GetClientIP">
            <summary>
            获取客户端IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.PublicMethod.GetCheckedItemList(System.Web.UI.WebControls.CheckBoxList)">
            <summary>
            获取页中 列表选中的项
            </summary>
            <param name="chklist">CheckBoxList ID</param>
            <returns></returns>
        </member>
        <member name="M:Common.PublicMethod.DataTableToObjectList``1(System.Data.DataTable)">
            <summary>
            DataTable To List
            </summary>
            <typeparam name="TType">object type</typeparam>
            <param name="dt">DataTable</param>
            <returns></returns>
        </member>
        <member name="M:Common.PublicMethod.ToDataTable(System.Collections.IList)">
            <summary>
            泛型集合转换成DATATABLE
            </summary>
            <param name="list">集合</param>
            <returns></returns>
        </member>
        <member name="M:Common.PublicMethod.GetCharLength(System.String,System.String)">
            <summary>
            获取指定字符串中的指定字符的个数
            </summary>
            <param name="source">源字符串</param>
            <param name="value">要查找的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Common.PublicMethod.CharBeforeAppend(System.String,System.String)">
            <summary>
            给指定字符串前面增加指定值
            </summary>
            <param name="source">源字符串</param>
            <param name="value">要增加的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Common.PublicMethod.CharBeforeAppend(System.String,System.String,System.Int32)">
            <summary>
            给指定字符串前面增加指定个数的指定值
            </summary>
            <param name="source">源字符串</param>
            <param name="value">要增加的字符串</param>
            <param name="length">要增加的个数</param>
            <returns></returns>
        </member>
        <member name="M:Common.PublicMethod.MergeDataTable(System.Data.DataTable,System.Data.DataTable[])">
            <summary>
            合并指定表并返回
            </summary>
            <param name="dt">原始表</param>
            <param name="DataTables">可变表参</param>
            <returns></returns>
        </member>
        <member name="M:Common.DbHelper.SqlServer.SqlEasy.GetDataByPager2000(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页获取数据列表 适用于SQL2000
            </summary>
            <param name="fieldlist">查找的字段</param>
            <param name="tablename">表名</param>
            <param name="where">查询条件</param>
            <param name="orderfield">排序字段 如 id asc,name desc</param>
            <param name="key">主键</param>
            <param name="pageindex">页索引</param>
            <param name="pagesize">每页记录数</param>
            <returns></returns>
        </member>
        <member name="M:Common.DbHelper.SqlServer.SqlEasy.GetDataByPager2000(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            分页获取数据列表 适用于SQL2000
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="fieldlist">查找的字段</param>
            <param name="tablename">表名</param>
            <param name="where">查询条件</param>
            <param name="orderfield">排序字段</param>
            <param name="key">主键</param>
            <param name="pageindex">页索引</param>
            <param name="pagesize">每页记录数</param>
            <param name="ordertype">排序方式 0=ASC 1=DESC</param>
            <param name="recordcount">总记录数</param>
            <returns></returns>
        </member>
        <member name="M:Common.DbHelper.SqlServer.SqlEasy.GetDataByPager2005(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            分页获取数据列表 适用于SQL2005
            </summary>
            <param name="SelectList">选取字段列表</param>
            <param name="tablename">数据源名称表名或视图名称</param>
            <param name="where">筛选条件</param>
            <param name="OrderExpression">排序 必须指定一个排序字段</param>
            <param name="pageindex">页索引 从0开始</param>
            <param name="pagesize">每页记录数</param>
            <returns></returns>
        </member>
        <member name="M:Common.DbHelper.SqlServer.SqlEasy.GetRecordCount(System.String)">
            <summary>
            获取某表中的总记录数
            </summary>
            <param name="tablename">表名</param>
            <returns></returns>
        </member>
        <member name="M:Common.DbHelper.SqlServer.SqlEasy.GetMaxID(System.String,System.String)">
            <summary>
            获取指定表中指定字段的最大值
            </summary>
            <param name="tableName">表名称</param>
            <param name="field">字段</param>
            <returns>Return Type:Int</returns>
        </member>
        <member name="M:Common.DbHelper.SqlServer.SqlEasy.GetMaxID(System.String,System.String,System.String)">
            <summary>
            获取指定表中指定字段的最大值
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="tableName">表名称</param>
            <param name="field">字段</param>
            <returns>Return Type:Int</returns>
        </member>
        <member name="M:Common.DbHelper.SqlServer.SqlEasy.GetDataPages(System.Int32,System.Int32)">
            <summary>
            获取总页数
            </summary>
            <param name="pagesize">每页记录数</param>
            <param name="recordcount">总记录数</param>
            <returns></returns>
        </member>
        <member name="P:Common.DbHelper.SqlServer.SqlEasy.connString">
            <summary>
            获取连接字符串
            </summary>
        </member>
        <member name="T:Common.SqlHelper">
            <summary>
            The SqlHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of SqlClient
            </summary>
        </member>
        <member name="M:Common.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of SqlParameters to be added to command</param>
        </member>
        <member name="M:Common.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
        </member>
        <member name="M:Common.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:Common.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:Common.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],Common.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:Common.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:Common.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Common.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
        </member>
        <member name="M:Common.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Common.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Common.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:Common.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Common.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Common.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Private helper method that execute a SqlCommand (that returns a resultset) against the specified SqlTransaction and SqlConnection
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Common.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:Common.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <remarks>
            e.g.:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid SqlCommand object</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified
            SqlTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Common.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="T:Common.SqlHelper.SqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:Common.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:Common.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:Common.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:Common.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:Common.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Deep copy of cached SqlParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Common.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters to be cached</param>
        </member>
        <member name="M:Common.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of SqlParamters</returns>
        </member>
        <member name="M:Common.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Common.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Common.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Common.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Common.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="T:Common.SQLInjectionHelper">
             <summary>
            SQLInjectionHelper 的摘要说明
             </summary>
        </member>
        <member name="M:Common.SQLInjectionHelper.ValidUrlPostData">
            <summary>
            获取Post的数据
            </summary>
        </member>
        <member name="M:Common.SQLInjectionHelper.ValidUrlGetData">
            <summary>
            获取QueryString中的数据
            </summary>
        </member>
        <member name="M:Common.SQLInjectionHelper.ValidData(System.String)">
            <summary>
            验证是否存在注入代码
            </summary>
            <param name="inputData"></param>
        </member>
        <member name="M:Common.SQLInjectionHelper.GetRegexString">
            <summary>
            获取正则表达式
            </summary>
            <param name="queryConditions"></param>
            <returns></returns>
        </member>
        <member name="T:Common.DbHelper.SQLite.SQLiteHelper">
            <summary>
            SQLiteHelper is a utility class similar to "SQLHelper" in MS
            Data Access Application Block and follows similar pattern.
            </summary>
        </member>
        <member name="M:Common.DbHelper.SQLite.SQLiteHelper.#ctor">
            <summary>
            Creates a new <see cref="T:Common.DbHelper.SQLite.SQLiteHelper"/> instance. The ctor is marked private since all members are static.
            </summary>
        </member>
        <member name="M:Common.DbHelper.SQLite.SQLiteHelper.CreateCommand(System.Data.SQLite.SQLiteConnection,System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            Creates the command.
            </summary>
            <param name="connection">Connection.</param>
            <param name="commandText">Command text.</param>
            <param name="commandParameters">Command parameters.</param>
            <returns>SQLite Command</returns>
        </member>
        <member name="M:Common.DbHelper.SQLite.SQLiteHelper.CreateCommand(System.String,System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            Creates the command.
            </summary>
            <param name="connectionString">Connection string.</param>
            <param name="commandText">Command text.</param>
            <param name="commandParameters">Command parameters.</param>
            <returns>SQLite Command</returns>
        </member>
        <member name="M:Common.DbHelper.SQLite.SQLiteHelper.CreateParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            Creates the parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterType">Parameter type.</param>
            <param name="parameterValue">Parameter value.</param>
            <returns>SQLiteParameter</returns>
        </member>
        <member name="M:Common.DbHelper.SQLite.SQLiteHelper.ExecuteDataSet(System.String,System.String,System.Object[])">
            <summary>
            Shortcut method to execute dataset from SQL Statement and object[] arrray of parameter values
            </summary>
            <param name="connectionString">SQLite Connection string</param>
            <param name="commandText">SQL Statement with embedded "@param" style parameter names</param>
            <param name="paramList">object[] array of parameter values</param>
            <returns></returns>
        </member>
        <member name="M:Common.DbHelper.SQLite.SQLiteHelper.ExecuteDataSet(System.Data.SQLite.SQLiteConnection,System.String,System.Object[])">
            <summary>
            Shortcut method to execute dataset from SQL Statement and object[] arrray of  parameter values
            </summary>
            <param name="cn">Connection.</param>
            <param name="commandText">Command text.</param>
            <param name="paramList">Param list.</param>
            <returns></returns>
        </member>
        <member name="M:Common.DbHelper.SQLite.SQLiteHelper.ExecuteDataset(System.Data.SQLite.SQLiteCommand)">
            <summary>
            Executes the dataset from a populated Command object.
            </summary>
            <param name="cmd">Fully populated SQLiteCommand</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Common.DbHelper.SQLite.SQLiteHelper.ExecuteDataset(System.Data.SQLite.SQLiteTransaction,System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            Executes the dataset in a SQLite Transaction
            </summary>
            <param name="transaction">SQLiteTransaction. Transaction consists of Connection, Transaction,  /// and Command, all of which must be created prior to making this method call. </param>
            <param name="commandText">Command text.</param>
            <param name="commandParameters">Sqlite Command parameters.</param>
            <returns>DataSet</returns>
            <remarks>user must examine Transaction Object and handle transaction.connection .Close, etc.</remarks>
        </member>
        <member name="M:Common.DbHelper.SQLite.SQLiteHelper.ExecuteDataset(System.Data.SQLite.SQLiteTransaction,System.String,System.Object[])">
            <summary>
            Executes the dataset with Transaction and object array of parameter values.
            </summary>
            <param name="transaction">SQLiteTransaction. Transaction consists of Connection, Transaction,    /// and Command, all of which must be created prior to making this method call. </param>
            <param name="commandText">Command text.</param>
            <param name="commandParameters">object[] array of parameter values.</param>
            <returns>DataSet</returns>
            <remarks>user must examine Transaction Object and handle transaction.connection .Close, etc.</remarks>
        </member>
        <member name="M:Common.DbHelper.SQLite.SQLiteHelper.UpdateDataset(System.Data.SQLite.SQLiteCommand,System.Data.SQLite.SQLiteCommand,System.Data.SQLite.SQLiteCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid SQL statement  to insert new records into the data source</param>
            <param name="deleteCommand">A valid SQL statement to delete records from the data source</param>
            <param name="updateCommand">A valid SQL statement used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:Common.DbHelper.SQLite.SQLiteHelper.ExecuteReader(System.Data.SQLite.SQLiteCommand,System.String,System.Object[])">
            <summary>
            ShortCut method to return IDataReader
            NOTE: You should explicitly close the Command.connection you passed in as
            well as call Dispose on the Command  after reader is closed.
            We do this because IDataReader has no underlying Connection Property.
            </summary>
            <param name="cmd">SQLiteCommand Object</param>
            <param name="commandText">SQL Statement with optional embedded "@param" style parameters</param>
            <param name="paramList">object[] array of parameter values</param>
            <returns>IDataReader</returns>
        </member>
        <member name="M:Common.DbHelper.SQLite.SQLiteHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Shortcut to ExecuteNonQuery with SqlStatement and object[] param values
            </summary>
            <param name="connectionString">SQLite Connection String</param>
            <param name="commandText">Sql Statement with embedded "@param" style parameters</param>
            <param name="paramList">object[] array of parameter values</param>
            <returns></returns>
        </member>
        <member name="M:Common.DbHelper.SQLite.SQLiteHelper.ExecuteNonQuery(System.Data.SQLite.SQLiteTransaction,System.String,System.Object[])">
            <summary>
            Executes  non-query sql Statment with Transaction
            </summary>
            <param name="transaction">SQLiteTransaction. Transaction consists of Connection, Transaction,   /// and Command, all of which must be created prior to making this method call. </param>
            <param name="commandText">Command text.</param>
            <param name="paramList">Param list.</param>
            <returns>Integer</returns>
            <remarks>user must examine Transaction Object and handle transaction.connection .Close, etc.</remarks>
        </member>
        <member name="M:Common.DbHelper.SQLite.SQLiteHelper.ExecuteNonQuery(System.Data.IDbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="cmd">CMD.</param>
            <returns></returns>
        </member>
        <member name="M:Common.DbHelper.SQLite.SQLiteHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Shortcut to ExecuteScalar with Sql Statement embedded params and object[] param values
            </summary>
            <param name="connectionString">SQLite Connection String</param>
            <param name="commandText">SQL statment with embedded "@param" style parameters</param>
            <param name="paramList">object[] array of param values</param>
            <returns></returns>
        </member>
        <member name="M:Common.DbHelper.SQLite.SQLiteHelper.ExecuteXmlReader(System.Data.IDbCommand)">
            <summary>
            Execute XmlReader with complete Command
            </summary>
            <param name="command">SQLite Command</param>
            <returns>XmlReader</returns>
        </member>
        <member name="M:Common.DbHelper.SQLite.SQLiteHelper.AttachParameters(System.Data.SQLite.SQLiteCommand,System.String,System.Object[])">
            <summary>
            Parses parameter names from SQL Statement, assigns values from object array ,   /// and returns fully populated ParameterCollection.
            </summary>
            <param name="commandText">Sql Statement with "@param" style embedded parameters</param>
            <param name="paramList">object[] array of parameter values</param>
            <returns>SQLiteParameterCollection</returns>
            <remarks>Status experimental. Regex appears to be handling most issues. Note that parameter object array must be in same ///order as parameter names appear in SQL statement.</remarks>
        </member>
        <member name="M:Common.DbHelper.SQLite.SQLiteHelper.ExecuteNonQueryTypedParams(System.Data.IDbCommand,System.Data.DataRow)">
            <summary>
            Executes non query typed params from a DataRow
            </summary>
            <param name="command">Command.</param>
            <param name="dataRow">Data row.</param>
            <returns>Integer result code</returns>
        </member>
        <member name="M:Common.DbHelper.SQLite.SQLiteHelper.AssignParameterValues(System.Data.IDataParameterCollection,System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an IDataParameterCollection
            </summary>
            <param name="commandParameters">The IDataParameterCollection to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the command's parameter values</param>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the parameter names are invalid.</exception>
        </member>
        <member name="M:Common.DbHelper.SQLite.SQLiteHelper.AssignParameterValues(System.Data.IDataParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of IDataParameters
            </summary>
            <param name="commandParameters">Array of IDataParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the parameter names are invalid.</exception>
        </member>
        <member name="M:Common.DbHelper.SQLite.SQLiteHelper.AssignParameterValues(System.Data.IDataParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of IDataParameters
            </summary>
            <param name="commandParameters">Array of IDataParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
            <exception cref="T:System.ArgumentException">Thrown if an incorrect number of parameters are passed.</exception>
        </member>
        <member name="M:Common.DbHelper.SQLite.SQLiteEasy.ExecuteDataTable(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            分页获取数据
            </summary>
            <param name="SelectList">字段列表</param>
            <param name="tablename">表名或视图名</param>
            <param name="where">筛选条件</param>
            <param name="OrderExpression">排序字段。格式：id desc</param>
            <param name="pageindex">页索引</param>
            <param name="pagesize">每页记录数</param>
            <returns></returns>
        </member>
        <member name="M:Common.DbHelper.SQLite.SQLiteEasy.GetRecordCount(System.String,System.String)">
            <summary>
            获取总记录数
            </summary>
            <param name="name">表或视图名</param>
            <param name="where">筛选条件</param>
            <returns></returns>
        </member>
        <member name="T:Common.SqlRegexFilter">
            <summary>
            防SQL注入漏洞的HttpModule
            Powered By killkill
            </summary>
        </member>
        <member name="F:Common.SqlRegexFilter.minQueryLength">
            <summary>
            检测的最短长长度，在web.config中配置
            </summary>
        </member>
        <member name="F:Common.SqlRegexFilter.denyRegex">
            <summary>
            SQL注入检测的正则表达式，在web.config中配置
            </summary>
        </member>
        <member name="F:Common.SqlRegexFilter.redirectPage">
            <summary>
            检测到SQL注入后跳转到的页面，在web.config中配置
            </summary>
        </member>
        <member name="M:Common.SqlRegexFilter.Init(System.Web.HttpApplication)">
            <summary>
            初始化
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Common.SqlRegexFilter.context_BeginRequest(System.Object,System.EventArgs)">
            <summary>
            截获每个请求并分析其Request参数
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Common.StringHelper.RemoveHtmlFormat(System.String)">
            <summary>
            删除HTML标记
            </summary>
            <param name="htmlString">带有样式的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Common.StringHelper.CutString(System.String,System.Int32)">
            <summary>
            截断字符串
            </summary>
            <param name="str">要截断的字符串</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:Common.StringHelper.CreateIDCode">
            <summary>
            生成唯一ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.StringHelper.ZipString(System.String)">
            <summary>
            压缩字符串
            </summary>
            <param name="unCompressedString">要压缩的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Common.StringHelper.UnzipString(System.String)">
            <summary>
             解压字符串
            </summary>
            <param name="unCompressedString">要解压的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Common.StringHelper.ToSBC(System.String)">
             
             转全角的函数(SBC case)
             
             任意字符串
             全角字符串
            
            全角空格为12288，半角空格为32///其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
                    
        </member>
        <member name="M:Common.StringHelper.ToDBC(System.String)">
             
             转半角的函数(DBC case)
             
             任意字符串
             半角字符串
            
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            
        </member>
        <member name="M:Common.StringHelper.HtmlEncode(System.String)">
            <summary>
            对文本框中的字符进行HTML编码
            </summary>
            <param name="str">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:Common.StringHelper.HtmlDecode(System.String)">
            <summary>
            对字符串进行HTML解码,解析为可为页面识别的代码
            </summary>
            <param name="str">要解码的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Common.StringHelper.Filter(System.String)">
            <summary>
            
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Common.StringHelper.SqlFilter2(System.String)">
             <summary>
            SQL注入过滤
             </summary>
             <param name="InText">要进行过滤的字符串</param>
             <returns>如果参数存在不安全字符,则返回true</returns>
        </member>
        <member name="M:Common.StringHelper.SqlFilter(System.String)">
            <summary>
            将指定的str串执行sql关键字过滤并返回
            </summary>
            <param name="str">要过滤的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Common.StringHelper.SqlFilters(System.String[])">
            <summary>
            将指定的串列表执行sql关键字过滤并以[,]号分隔返回
            </summary>
            <param name="strs"></param>
            <returns></returns>
        </member>
        <member name="M:Common.StringHelper.GetCheckedItemValue(System.Web.UI.WebControls.CheckBoxList)">
            <summary>
            获取CheckBoxList控件中选中的项的value，字符串由,分隔
            </summary>
            <param name="chk">CheckBoxList 控件ID</param>
            <returns></returns>
        </member>
        <member name="M:Common.StringHelper.GetCheckedItemText(System.Web.UI.WebControls.CheckBoxList)">
            <summary>
            获取CheckBoxList控件中选中的项的Text，字符串由,分隔
            </summary>
            <param name="chk">CheckBoxList 控件ID</param>
            <returns></returns>
        </member>
        <member name="M:Common.StringHelper.CheckItem(System.String,System.Web.UI.WebControls.CheckBoxList)">
            <summary>
            根据提供的Id字符串，将列表中的项选中
            </summary>
            <param name="itemid">Id字符串，由,分隔</param>
            <param name="checkboxlist">CheckBoxList控件</param>
        </member>
        <member name="M:Common.StringHelper.ComputeMD5(System.String)">
            <summary>
            利用 MD5 加密算法加密字符串
            </summary>
            <param name="src">字符串源串</param>
            <returns>返加MD5 加密后的字符串</returns>
        </member>
        <member name="M:Common.StringHelper.ComputeMD5(System.String,System.Boolean)">
            <summary>
            将指定串加密为不包含中杠的MD5值
            </summary>
            <param name="str">要加密的字符串</param>
            <param name="isupper">返回值的大小写(true大写,false小写)</param>
            <returns></returns>
        </member>
        <member name="M:Common.StringHelper.GetByteArray(System.String)">
            <summary>
            将字符串翻译成字节数组
            </summary>
            <param name="src">字符串源串</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:Common.StringHelper.EncryptDES(System.String,System.String)">
            <summary>
            DES加密字符串
            </summary>
            <param name="encryptString">待加密的字符串</param>
            <param name="encryptKey">加密密钥,要求为8位</param>
            <returns>加密成功返回加密后的字符串，失败返回源串</returns>
        </member>
        <member name="M:Common.StringHelper.DecryptDES(System.String,System.String)">
            <summary>
            DES解密字符串
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <param name="key">解密密钥，要求8位</param>
            <returns></returns>
        </member>
        <member name="M:Common.StringHelper.EncryptAES(System.String,System.String)">
            <summary>
            AES加密
            </summary>
            <param name="str">要加密字符串</param>
            <returns>返回加密后字符串</returns>
        </member>
        <member name="M:Common.StringHelper.DecryptAES(System.String,System.String)">
            <summary>
            AES解密
            </summary>
            <param name="str">要解密字符串</param>
            <returns>返回解密后字符串</returns>
        </member>
        <member name="M:Common.StringHelper.ToBase64(System.String)">
            <summary>
            base64 字符串编码
            </summary>
            <param name="str">要编码的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Common.StringHelper.UnBase64(System.String)">
            <summary>
            base 64 字符串解码
            </summary>
            <param name="base64str">要解码的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Common.StringHelper.ConvertWeekDayToCn(System.DayOfWeek)">
            <summary>
            转换为中文星期
            </summary>
            <param name="dayfweek">英文星期</param>
            <returns></returns>
        </member>
        <member name="M:Common.StringHelper.RunCommand(System.String)">
            <summary>
            执行CMD 命令
            </summary>
            <param name="strCommand">命令串</param>
            <returns></returns>
        </member>
        <member name="M:Common.StringHelper.ReplaceFirst(System.String,System.String,System.String)">
            <summary>
            替换指定符串中的首个指定字符为新的字符
            </summary>
            <param name="sourcestr">要修改的字符串</param>
            <param name="oldstr">被替换的字符串</param>
            <param name="newstr">替换字符串 </param>
            <returns></returns>
        </member>
        <member name="M:Common.StringHelper.BuildPassword">
            <summary>
            生成随机字符串，格式：1q2w3e4r
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Upload.ImageHelper.CutForSquare(System.Web.HttpPostedFile,System.String,System.Int32,System.Int32)">
            <summary>
            正方型裁剪
            以图片中心为轴心，截取正方型，然后等比缩放
            用于头像处理
            </summary>
            <param name="postedFile">原图HttpPostedFile对象</param>
            <param name="fileSaveUrl">缩略图存放地址</param>
            <param name="side">指定的边长（正方型）</param>
            <param name="quality">质量（范围0-100）</param>
        </member>
        <member name="M:Common.Upload.ImageHelper.CutForSquare(System.IO.Stream,System.String,System.Int32,System.Int32)">
            <summary>
            正方型裁剪
            以图片中心为轴心，截取正方型，然后等比缩放
            用于头像处理
            </summary>
            <param name="postedFile">原图HttpPostedFile对象</param>
            <param name="fileSaveUrl">缩略图存放地址</param>
            <param name="side">指定的边长（正方型）</param>
            <param name="quality">质量（范围0-100）</param>
        </member>
        <member name="M:Common.Upload.ImageHelper.CutForCustom(System.Web.HttpPostedFile,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            指定长宽裁剪
            按模版比例最大范围的裁剪图片并缩放至模版尺寸
            </summary>
            <param name="postedFile">原图HttpPostedFile对象</param>
            <param name="fileSaveUrl">保存路径</param>
            <param name="maxWidth">最大宽(单位:px)</param>
            <param name="maxHeight">最大高(单位:px)</param>
            <param name="quality">质量（范围0-100）</param>
        </member>
        <member name="M:Common.Upload.ImageHelper.ZoomAuto(System.IO.Stream,System.String,System.Double,System.Double,System.String,System.String,System.Drawing.Font)">
            <summary>
            图片等比缩放并添加水印
            </summary>
            <param name="postedFile">原图HttpPostedFile对象</param>
            <param name="savePath">缩略图存放地址</param>
            <param name="targetWidth">指定的最大宽度</param>
            <param name="targetHeight">指定的最大高度</param>
            <param name="watermarkText">水印文字(为""表示不使用水印)</param>
            <param name="watermarkImage">水印图片路径(为""表示不使用水印)</param>
            <param name="waterTextFont">文字水印字体</param>
        </member>
        <member name="M:Common.Upload.ImageHelper.ZoomAuto(System.Drawing.Image,System.String,System.Double,System.Double,System.String,System.String,System.Drawing.Font)">
            <summary>
            图片等比缩放并添加水印
            </summary>
            <param name="initImage">Image 对象</param>
            <param name="savePath">缩略图存放地址</param>
            <param name="targetWidth">指定的最大宽度</param>
            <param name="targetHeight">指定的最大高度</param>
            <param name="watermarkText">水印文字(为""表示不使用水印)</param>
            <param name="watermarkImage">水印图片路径(为""表示不使用水印)</param>
            <param name="waterTextFont">文字水印字体</param>
        </member>
        <member name="M:Common.Upload.ImageHelper.ZoomAuto(System.Web.HttpPostedFile,System.String,System.Double,System.Double,System.String,System.String,System.Drawing.Font)">
            <summary>
            图片等比缩放并添加水印
            </summary>
            <param name="postedFile">原图HttpPostedFile对象</param>
            <param name="savePath">缩略图存放地址</param>
            <param name="targetWidth">指定的最大宽度</param>
            <param name="targetHeight">指定的最大高度</param>
            <param name="watermarkText">水印文字(为""表示不使用水印)</param>
            <param name="watermarkImage">水印图片路径(为""表示不使用水印)</param>
            <param name="waterTextFont">文字水印字体</param>
        </member>
        <member name="M:Common.Upload.ImageHelper.IsWebImage(System.String)">
            <summary>
            判断文件类型是否为WEB格式图片
            (注：JPG,GIF,BMP,PNG)
            </summary>
            <param name="contentType">HttpPostedFile.ContentType</param>
            <returns></returns>
        </member>
        <member name="M:Common.Upload.ImageHelper.CheckImageSize(System.Web.HttpPostedFile,System.Int32)">
            <summary>
            检查图片的大小
            </summary>
            <param name="postfile">HttpPostedFile</param>
            <param name="max">允许上图片的大小</param>
            <returns>true:允许上传 false:超过允许值</returns>
        </member>
        <member name="M:Common.Upload.ImageHelper.GetPartImage(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            获取指定区域的图片
            </summary>
            <param name="pPath">原始图片路径</param>
            <param name="pSavedPath">保存路径</param>
            <param name="pPartStartPointX">目标图片开始绘制处的坐标X值(通常为)</param>
            <param name="pPartStartPointY">目标图片开始绘制处的坐标Y值(通常为)</param>
            <param name="pPartWidth">目标图片的宽度</param>
            <param name="pPartHeight">目标图片的高度</param>
            <param name="pOrigStartPointX">原始图片开始截取处的坐标X值</param>
            <param name="pOrigStartPointY">原始图片开始截取处的坐标Y值</param>
        </member>
        <member name="M:Common.Upload.Upload.UploadImage(System.Byte[],System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            上传图片
            </summary>
            <param name="imgBuffer">字节数组</param>
            <param name="uploadpath">保存路径。绝对或虚拟路径</param>
            <param name="imgformat">图片保存格式</param>
            <returns>上传成功后返回的新的文件名</returns>
        </member>
        <member name="M:Common.Upload.Upload.UploadImage(System.IO.Stream,System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            上传图片
            </summary>
            <param name="stream">Stream</param>
            <param name="uploadpath">保存路径。绝对或虚拟路径</param>
            <param name="imgformat">图片保存格式</param>
            <returns>上传成功后返回的新的文件名</returns>
        </member>
        <member name="M:Common.Upload.Upload.UploadImage(System.Web.HttpPostedFile,System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            上传图片
            </summary>
            <param name="postfile">客户端上传的文件</param>
            <param name="uploadpath">保存地址</param>
            <param name="imgformat">图片格式</param>
            <returns></returns>
        </member>
        <member name="M:Common.Upload.Upload.UploadImage(System.Web.HttpPostedFile,System.String,System.Boolean)">
            <summary>
            上传图片，保存为JPEG格式
            </summary>
            <param name="postfile">HttpPostedFile</param>
            <param name="uploadpath">保存文件地址</param>
            <returns>返回上传后的路径</returns>
        </member>
        <member name="M:Common.Upload.Upload.UploadImage(System.Web.HttpPostedFile,System.String)">
            <summary>
            自动生成新的图片名称
            </summary>
            <param name="postfile"></param>
            <param name="uploadpath"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Upload.Upload.UploadImageWithWaterText(System.Web.HttpPostedFile,System.String,System.String,System.Drawing.Font)">
            <summary>
            上传图片，不缩放，并添加文字水印
            </summary>
            <param name="postedfile">HTTPPOSTEDFILE</param>
            <param name="uploadpath">保存的全路径，包括文件名</param>
            <param name="text">水印文字</param>
            <param name="waterTextFont">文字水印字体</param>
        </member>
        <member name="M:Common.Upload.Upload.UploadImageWithWaterText(System.Web.HttpPostedFile,System.String,System.String)">
            <summary>
            上传图片，不缩放，并添加文字水印
            </summary>
            <param name="postedfile">HTTPPOSTEDFILE</param>
            <param name="uploadpath">保存的全路径，包括文件名</param>
            <param name="text">水印文字</param>
        </member>
        <member name="M:Common.Upload.Upload.UploadImageWithWaterImage(System.Web.HttpPostedFile,System.String,System.String)">
            <summary>
            上传图片，不缩放，并添加图片水印
            </summary>
            <param name="postedfile">源图</param>
            <param name="uploadpath">保存的路径，包含上传后的文件名</param>
            <param name="waterimg">水印图片的虚拟路径</param>
        </member>
        <member name="M:Common.Upload.Upload.CutImageAutoZoom(System.Web.HttpPostedFile,System.String,System.Int32,System.Int32)">
            <summary>
            图片等比缩放
            </summary>
            <param name="postfile">源图</param>
            <param name="uploadpath">保存路径及文件名</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
        </member>
        <member name="M:Common.Upload.Upload.UploadFile(System.Web.HttpPostedFile,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="postfile">上传的原始文件</param>
            <param name="uploadpath">保存地址,如：'/upload/images/aaaa.jpg'</param>
            <returns>返回上传后的文件名</returns>
        </member>
        <member name="T:Common.ValidateCode.MyChar2G">
            <summary>
            自定义字符对象
            </summary>
        </member>
        <member name="M:Common.ValidateCode.MyChar2G.#ctor">
            <summary>
            类默认构造器
            </summary>
        </member>
        <member name="M:Common.ValidateCode.MyChar2G.#ctor(System.Char)">
            <summary>
            类参数构造器
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Common.ValidateCode.MyChar2G.#ctor(System.Char,System.Drawing.Font,System.Drawing.Brush,System.Drawing.Brush)">
            <summary>
            类参数构造器
            </summary>
            <param name="c"></param>
            <param name="fontFormat">字体格式</param>
            <param name="foreColor">前景色</param>
            <param name="backColor">背景色</param>
        </member>
        <member name="M:Common.ValidateCode.MyChar2G.ComputeNewSize">
            <summary>
            计算新字体大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.ValidateCode.MyChar2G.ComputeLdx">
            <summary>
            计算字符旋转后 x 轴左移量
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.ValidateCode.MyChar2G.ComputeTdy">
            <summary>
            计算字符旋转后 y 轴上移量
            </summary>
            <returns></returns>
        </member>
        <member name="P:Common.ValidateCode.MyChar2G.CharObj">
            <summary>
            获取或设置字符
            </summary>
        </member>
        <member name="P:Common.ValidateCode.MyChar2G.Font">
            <summary>
            获取或设置字体
            </summary>
        </member>
        <member name="P:Common.ValidateCode.MyChar2G.OldSize">
            <summary>
            获取或设置旧字体大小
            </summary>
        </member>
        <member name="P:Common.ValidateCode.MyChar2G.ForeColor">
            <summary>
            获取或设置前景色
            </summary>
        </member>
        <member name="P:Common.ValidateCode.MyChar2G.BackColor">
            <summary>
            获取或设置背景色
            </summary>
        </member>
        <member name="P:Common.ValidateCode.MyChar2G.Angle">
            <summary>
            旋转角度
            </summary>
        </member>
        <member name="M:Common.ValidateCode.VcodeImageCreator.#ctor">
            <summary>
            类默认构造器
            </summary>
        </member>
        <member name="M:Common.ValidateCode.VcodeImageCreator.CreateImage(System.Int32,System.Int32,System.String)">
            <summary>
            创建验证码图片
            </summary>
            <param name="width">图片宽度</param>
            <param name="height">图片高度</param>
            <param name="validationCode">验证码</param>
        </member>
        <member name="M:Common.ValidateCode.VcodeImageCreator.DrawBeziers(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            绘制贝塞尔曲线
            </summary>
            <param name="g"></param>
            <param name="rect">绘制范围</param>
        </member>
        <member name="M:Common.ValidateCode.VcodeImageCreator.NextFont">
            <summary>
            随机生成字体
            </summary>
            <returns></returns>
        </member>
        <member name="P:Common.ValidateCode.VcodeImageCreator.CharMinSize">
            <summary>
            设置或获取最小字符尺寸
            </summary>
        </member>
        <member name="P:Common.ValidateCode.VcodeImageCreator.CharMaxSize">
            <summary>
            设置或获取最大字符尺寸
            </summary>
        </member>
        <member name="M:Common.ValidateCode.VcodeImageCreator2.TwistImage(System.Drawing.Bitmap,System.Boolean,System.Double,System.Double)">
            <summary>
            正弦曲线Wave扭曲图片
            </summary>
            <param name="srcBmp">图片路径</param>
            <param name="bXDir">如果扭曲则选择为True</param>
            <param name="nMultValue">波形的幅度倍数，越大扭曲的程度越高，一般为3</param>
            <param name="dPhase">波形的起始相位，取值区间[0-2*PI)</param>
            <returns></returns>
        </member>
        <member name="M:Common.ValidateCode.VcodeImageCreator2.CreateImageCode(System.String)">
            <summary>
            生成字符验证码图片
            </summary>
            <param name="code">字符</param>
            <returns></returns>
        </member>
        <member name="M:Common.ValidateCode.VcodeImageCreator2.DisableHttpCache(System.Web.HttpContext)">
            <summary>
            禁用缓存
            </summary>
            <param name="context">httpcontext</param>
        </member>
        <member name="M:Common.ValidateCode.VcodeImageCreator2.CreateImageOnPage(System.String,System.Web.HttpContext)">
            <summary>
            将创建好的图片输出到页面
            </summary>
            <param name="code">验证码字符串</param>
            <param name="context"></param>
        </member>
        <member name="P:Common.ValidateCode.VcodeImageCreator2.Length">
            <summary>
            验证码长度(默认6个验证码的长度)
            </summary>
        </member>
        <member name="P:Common.ValidateCode.VcodeImageCreator2.IsTwist">
            <summary>
            是否使用扭曲效果 true使用 false不使用，默认为false
            </summary>
        </member>
        <member name="P:Common.ValidateCode.VcodeImageCreator2.Chaos">
            <summary>
            是否输出燥点(默认不输出)
            </summary>
        </member>
        <member name="P:Common.ValidateCode.VcodeImageCreator2.ChaosColor">
            <summary>
            输出燥点的颜色(默认灰色)
            </summary>
        </member>
        <member name="P:Common.ValidateCode.VcodeImageCreator2.CodeType">
            <summary>
            要验证码的形式，1=纯数字 2=纯字母 3=大全
            </summary>
        </member>
        <member name="P:Common.ValidateCode.VcodeImageCreator2.CodeSerial">
            <summary>
            自定义随机码字符串序列(使用逗号分隔)
            </summary>
        </member>
        <member name="M:Common.ValidateCode.VcodeImageCreator3.OutputImage(System.Web.HttpContext,System.String)">
            <summary>
            输出数学运算验证码表达式到浏览器
            </summary>
            <param name="context">httpcontext</param>
            <param name="sessionKey">保存运算值的SESSION的KEY</param>
        </member>
        <member name="M:Common.ValidateCode.VcodeImageCreator3.DisableHttpCache(System.Web.HttpContext)">
            <summary>
            禁用缓存
            </summary>
            <param name="context">httpcontext</param>
        </member>
        <member name="M:Common.ValidateCode.VcodePage.NextString(System.Int32,System.Int32)">
            <summary>
            随机生成字符串
            </summary>
            <param name="minChars"></param>
            <param name="maxChars"></param>
            <returns></returns>
        </member>
        <member name="P:Common.ValidateCode.VcodePage.VcodeType">
            <summary>
            要使用验证码的类型
            </summary>
        </member>
        <member name="P:Common.ValidateCode.VcodePage.ImageWidth">
            <summary>
            获取图片宽度
            </summary>
        </member>
        <member name="P:Common.ValidateCode.VcodePage.ImageHeight">
            <summary>
            获取图片高度
            </summary>
        </member>
        <member name="P:Common.ValidateCode.VcodePage.MinChars">
            <summary>
            获取最少字符个数
            </summary>
        </member>
        <member name="P:Common.ValidateCode.VcodePage.MaxChars">
            <summary>
            获取最多字符个数
            </summary>
        </member>
        <member name="P:Common.ValidateCode.VcodePage.CharMinSize">
            <summary>
            获取最小字符尺寸
            </summary>
        </member>
        <member name="P:Common.ValidateCode.VcodePage.CharMaxSize">
            <summary>
            获取最大字符尺寸
            </summary>
        </member>
        <member name="P:Common.ValidateCode.VcodePage.VcodeFontSize">
            <summary>
            验证码字体大小
            </summary>
        </member>
        <member name="P:Common.ValidateCode.VcodePage.VcodeCharType">
            <summary>
            验证码字符类型1=纯数字 2=纯字母 3=大全 默认数字
            </summary>
        </member>
        <member name="T:Common.XmlHelper">
            <summary>
            Summary description for XmlHelper.
            </summary>
        </member>
        <member name="M:Common.XmlHelper.GetAttributeValue(System.Xml.XmlNode,System.String,System.String@)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value from an attribute at the specified node.
            </summary>
            <param name="node">The XmlNode from which this method will get the value of an attribute.</param>
            <param name="attributeName">Name of the attribute that will be read.</param>
            <param name="value">Attribute value read by this method</param>
            <returns>True if node is found and value is retrieved successfully.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Common.XmlHelper.GetAttributeValue(System.Xml.XmlNode,System.String,System.Int32@)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value from an attribute at the specified node.
            </summary>
            <param name="node">The XmlNode from which this method will get the value of an attribute.</param>
            <param name="attributeName">Name of the attribute that will be read.</param>
            <param name="value">Attribute value read by this method</param>
            <returns>True if success.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Common.XmlHelper.GetAttributeValue(System.Xml.XmlNode,System.String,System.UInt32@)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value from an attribute at the specified node.
            </summary>
            <param name="node">The XmlNode from which this method will get the value of an attribute.</param>
            <param name="attributeName">Name of the attribute that will be read.</param>
            <param name="value">Attribute value read by this method</param>
            <returns>True if success.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Common.XmlHelper.SetAttributeValue(System.Xml.XmlNode,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Sets the value of an attribute for a given XmlNode.
            </summary>
            <param name="node">XmlNode whose attribute will be set.</param>
            <param name="attributeName">Name of the attribute to set.</param>
            <param name="value">Value to be set</param>
            <returns>True if success.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Common.XmlHelper.SetAttributeValue(System.Xml.XmlNode,System.String,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Sets the value of an attribute for a given XmlNode.
            </summary>
            <param name="node">XmlNode whose attribute will be set.</param>
            <param name="attributeName">Name of the attribute to set.</param>
            <param name="value">Value to be set</param>
            <returns>True if success.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Common.XmlHelper.SetAttributeValue(System.Xml.XmlNode,System.String,System.UInt32)">
            -----------------------------------------------------------------------------
            <summary>
            Sets the value of an attribute for a given XmlNode.
            </summary>
            <param name="node">XmlNode whose attribute will be set.</param>
            <param name="attributeName">Name of the attribute to set.</param>
            <param name="value">Value to be set</param>
            <returns>True if success.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Common.XmlHelper.GetDataTable(System.Xml.XmlNodeList)">
            -----------------------------------------------------------------------------
            <summary>s 
            Converts a list of Xml nodes to a DataTable.
            </summary>
            <param name="nodelist">List of Xml nodes</param>
            <returns>DataTable</returns>
            <remarks>
            This method convert
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Common.XmlHelper.GetDataTable(System.Xml.XmlNodeList,System.String,System.Boolean)">
            <summary>
            Converts a list of Xml nodes to a DataTable and sets one of the columns as a primary key.
            </summary>
            <param name="nodelist"></param>
            <param name="primaryKey"></param>
            <returns></returns>
        </member>
        <member name="M:Common.XmlHelper.UpdateChildNodesWithDataTable(System.Xml.XmlNode,System.Data.DataTable,System.String)">
            <summary>
            Updates the child nodes of "parentNode" by using the fields from a datatable.
            </summary>
            <param name="parentNode"></param>
            <param name="table"></param>
            <param name="keyField">The column name of the datatable that acts as a primary key.</param>
            <remarks>
            The child nodes that will be updated must have attribute fields that correspond to
            the DataTable.  The "keyField" will be used to identify the attribute that serves as 
            an identifier of the rows.  The datatable can have less fields than the nodes so
            you have the chance to update smaller subsets.
            Make sure that you did not call "AcceptChanges" before passing the datatable or this
            function will not find any change.
            </remarks>
        </member>
        <member name="M:Common.XmlHelper.UpdateChildNodesWithDataTable(System.Xml.XmlNode,System.Data.DataTable)">
            <summary>
            Update child nodes with data from datatable.
            Note that the datatable requires a primary key column defined.
            </summary>
            <param name="parentNode"></param>
            <param name="table"></param>
        </member>
        <member name="M:Common.XmlHelper.GetAttributeArray(System.Xml.XmlNodeList,System.String)">
            <summary>
            This method same as getting a column from a table. 
            </summary>
            <param name="nodeList"></param>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:Common.XmlHelper.NodeToString(System.Xml.XmlNode)">
            -----------------------------------------------------------------------------
            <summary>
            Returns contents of an XmlNode in a string.
            </summary>
            <param name="node">The XmlNode whose contents will be read into a string.</param>
            <returns>Xml formatted string with contents of "node" parameter.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Common.XmlHelper.NodeListToString(System.Xml.XmlNodeList)">
            <summary>
            Method to convert a XmlNodeList to string.
            </summary>
            <param name="nodeList"></param>
            <returns></returns>
        </member>
        <member name="M:Common.XmlHelper.DocumentToString(System.Xml.XmlDocument)">
            -----------------------------------------------------------------------------
            <summary>
            Method to convert a XmlDocument to string.
            </summary>
            <param name="xmlDoc">XmlDocument that will be converted to string.</param>
            <returns>A xml formatted string.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Common.XmlHelper.CreateChildNodes(System.Xml.XmlNode,System.String[])">
            -----------------------------------------------------------------------------
            <summary>
            Converts a string array to XmlNodes and appends all those nodes to a root node.
            </summary>
            <param name="rootNode"></param>
            <param name="names"></param>
            <returns></returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Common.XmlHelper.CreateChildNodes(System.Xml.XmlNode,System.String,System.String,System.String[])">
            <summary>
            Creates child nodes that would resemble a table whose values are passed in parameter attributeValues.
            </summary>
            <param name="rootNode"></param>
            <param name="nodeName"></param>
            <param name="attributeName"></param>
            <param name="attributeValues"></param>
        </member>
        <member name="M:Common.XmlHelper.Insert(System.Xml.XmlDocument,System.String)">
            <summary>
            Inserts an empty record at the bottom of the hierarchy, creating the
            tree as required.
            </summary>
            <param name="doc">The XmlDocument to which the node will be inserted.</param>
            <param name="xpath">The xml XPath query to get to the bottom node.</param>
            <returns>The XmlNode inserted into the hierarchy.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when an argument is null.</exception>
            <remarks>
            The "doc" variable must have a root node.  The path should not contain the root node.
            The path can contain only the node names or it can contain attributes in XPath query form.
            For example to insert an "Address" node at the bottom, the following is a valid xpath query
                xpath = "University[@Name='UT']/Student[@Id=12222]/Address"
            </remarks>
        </member>
        <member name="M:Common.XmlHelper.Insert(System.Xml.XmlDocument,System.String,System.String[],System.String[])">
            <summary>
            Inserts an record with a multiple fields at the bottom of the hierarchy.
            </summary>
            <param name="doc">The XmlDocument to which the node will be inserted.</param>
            <param name="xpath">The xml XPath query to get to the bottom node.</param>
            <param name="fields">The attribute names that will be created for the node inserted.</param>
            <param name="values">The corresponding value of each field.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when an argument is null.</exception>
            <remarks>
            The "doc" variable must have a root node.  The path should not contain the root node.
            The path can contain only the node names or it can contain attributes in XPath query form.
            For example to insert an "Address" node at the bottom, the following is a valid xpath query
                xpath = "University[@Name='UT']/Student[@Id=12222]/Address"
            </remarks>
        </member>
        <member name="M:Common.XmlHelper.Insert(System.Xml.XmlDocument,System.String,System.String,System.String)">
            <summary>
            Inserts a record with a single field at the bottom of the hierarchy.
            </summary>
            <param name="xpath">The xml XPath query to get to the bottom node.</param>
            <param name="field">The field to add to the record.</param>
            <param name="val">The value assigned to the field.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when an argument is null.</exception>
            <remarks>
            The "doc" variable must have a root node.  The path should not contain the root node.
            The path can contain only the node names or it can contain attributes in XPath query form.
            For example to insert an "Address" node at the bottom, the following is a valid xpath query
                xpath = "University[@Name='UT']/Student[@Id=12222]/Address"
            </remarks>
        </member>
        <member name="M:Common.XmlHelper.Insert(System.Xml.XmlDocument,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Insert a record with multiple fields at the bottom of the hierarchy.
            </summary>
            <param name="xpath">The xml XPath query to get to the bottom node.</param>
            <param name="fields">The array of fields as field/value pairs.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when an argument is null.</exception>
            <remarks>
            The "doc" variable must have a root node.  The path should not contain the root node.
            The path can contain only the node names or it can contain attributes in XPath query form.
            For example to insert an "Address" node at the bottom, the following is a valid xpath query
                xpath = "University[@Name='UT']/Student[@Id=12222]/Address"
            </remarks>
        </member>
        <member name="M:Common.XmlHelper.Insert(System.Xml.XmlDocument,System.String,System.Data.DataRow)">
            <summary>
            Inserts a record with multiple fields at bottom of the hierarchy.
            </summary>
            <param name="doc"></param>
            <param name="xpath">The xml XPath query to get to the bottom node.</param>
            <param name="rowValues">The DataRow values that will be added as attributes.</param>
            <remarks>
            The columns names of the DataRow will become the attribute names and 
            the row values of the DataRow will be the attribute values.
            The "doc" variable must have a root node.  The path should not contain the root node.
            The path can contain only the node names or it can contain attributes in XPath query form.
            For example to insert an "Address" node at the bottom, the following is a valid xpath query
                xpath = "University[@Name='UT']/Student[@Id=12222]/Address"
            </remarks>
        </member>
        <member name="M:Common.XmlHelper.Insert(System.Xml.XmlDocument,System.String,System.Data.DataTable)">
            <summary>
            Inserts a record with multiple fields from a DataTable at bottom of the hierarchy.
            </summary>
            <param name="doc"></param>
            <param name="xpath">The xml XPath query to get to the bottom node.</param>
            <param name="rowValues">The DataRow values that will be added as attributes.</param>
        </member>
        <member name="M:Common.XmlHelper.Insert(System.Xml.XmlDocument,System.String,System.String,System.String[])">
            <summary>
            Inserts a record with multiple values at bottom of hierarchy. This is analogous to inserting 
            a column of data.
            </summary>
            <param name="doc"></param>
            <param name="xpath">The xml XPath query to get to the bottom node.</param>
            <param name="field">Name of the attribute to be created at node inserted.</param>
            <param name="values">Values that will be inserted that correspond to the field name.</param>
            <remarks>
            The "doc" variable must have a root node.  The path should not contain the root node.
            The path can contain only the node names or it can contain attributes in XPath query form.
            For example to insert an "Address" node at the bottom, the following is a valid xpath query
                xpath = "University[@Name='UT']/Student[@Id=12222]/Address"
            </remarks>
        </member>
        <member name="M:Common.XmlHelper.Update(System.Xml.XmlDocument,System.String,System.String,System.String)">
            <summary>
            Update a single field in all records in the specified path.
            </summary>
            <param name="doc">The XmlDocument whose node will be udpated.</param>
            <param name="xpath">The xml path.</param>
            <param name="field">The field name to update.</param>
            <param name="val">The new value.</param>
            <returns>The number of records affected.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when an argument is null.</exception>
            <remarks>
            The "doc" variable must have a root node.  The path should not contain the root node.
            The path can contain only the node names or it can contain attributes in XPath query form.
            For example to update an "Address" node at the bottom, the following is a valid xpath query
                xpath = "University[@Name='UT']/Student[@Id=12222]/Address"
            </remarks>
        </member>
        <member name="M:Common.XmlHelper.Delete(System.Xml.XmlDocument,System.String)">
            <summary>
            Deletes all records of the specified path.
            </summary>
            <param name="xpath">The xml XPath query to get to the bottom node.</param>
            <returns>The number of records deleted.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when an argument is null.</exception>
            <remarks>Additional exceptions may be thrown by the XmlDocument class.</remarks>
        </member>
        <member name="M:Common.XmlHelper.Delete(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Deletes a field from all records on the specified path.
            </summary>
            <param name="path">The xml path.</param>
            <param name="field">The field to delete.</param>
            <returns>The number of records affected.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when an argument is null.</exception>
            <remarks>Additional exceptions may be thrown by the XmlDocument class.</remarks>
        </member>
        <member name="M:Common.XmlHelper.QueryScalar(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Return a single string representing the value of the specified field
            for the first record encountered.
            </summary>
            <param name="xpath">The xml path.</param>
            <param name="field">The desired field.</param>
            <returns>A string with the field's value or null.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when an argument is null.</exception>
            <remarks>Additional exceptions may be thrown by the XmlDocument class.</remarks>
        </member>
        <member name="M:Common.XmlHelper.Query(System.Xml.XmlDocument,System.String)">
            <summary>
            Returns a DataTable for all rows on the path.
            </summary>
            <param name="xpath">The xml path.</param>
            <returns>The DataTable with the returned rows.
            The row count will be 0 if no rows returned.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when an argument is null.</exception>
            <remarks>Additional exceptions may be thrown by the XmlDocument class.</remarks>
        </member>
        <member name="M:Common.XmlHelper.QueryField(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Returns an array of values for the specified field for all rows on
            the path.
            </summary>
            <param name="xpath">The xml path.</param>
            <param name="field">The desired field.</param>
            <returns>The array of string values for each row qualified by the path.
            A null is returned if the query results in 0 rows.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when an argument is null.</exception>
            <remarks>Additional exceptions may be thrown by the XmlDocument class.</remarks>
        </member>
        <member name="M:Common.XmlHelper.InsertNode(System.Xml.XmlNode,System.String[],System.Int32)">
            <summary>
            Inserts a node at the specified segment if it doesn't exist, otherwise
            traverses the node.
            </summary>
            <param name="node">The current node.</param>
            <param name="segments">The path segment list.</param>
            <param name="idx">The current segment.</param>
            <returns></returns>
        </member>
        <member name="M:Common.XmlHelper.CreateColumns(System.Data.DataTable,System.Xml.XmlNode)">
            <summary>
            Creates columns given an XmlNode.
            </summary>
            <param name="dt">The target DataTable.</param>
            <param name="node">The source XmlNode.</param>
        </member>
        <member name="T:Common.XmlHelper.NodeNavigator">
            <summary>
            Class required to navigate through children nodes
            </summary>
        </member>
    </members>
</doc>
